#include <iostream>
#include <vector>
using namespace std;

class Graph {
    vector<vector<int>> adj; //adjacency matrix
    int V;

    public:
        Graph(int V) {
            this->V = V;
            adj.resize(V, vector<int>(V, 0)); 
        }

        void addEdge(int u, int v, int w) {
            adj[u - 1][v - 1] = w; //this is a directed weighted graph, so only u ---> v is added
        }

        vector<vector<int>> getAdjacency() {
            vector<vector<int>> edges;
            for (int i = 0; i < V; i++) {
                for (int j = 0; j < V; j++) {
                    if (adj[i][j] != 0) edges.push_back({i + 1, j + 1, adj[i][j]});
                }
            }

            return edges;
        }

};

vector<int> bellamFord(int start, int V, vector<vector<int>>& adj) {
    vector<int> dist(V, 1e9);
    dist[start - 1] = 0;

    for (int i = 0; i < V - 1; i++) {
        for (vector<int>& edge : adj) {
            int u = edge[0] - 1, v = edge[1] - 1, w = edge[2];

            if (dist[u] != 1e9 && dist[u] + w < dist[v]) {
                if (i == V - 1) return {-1};
                dist[v] = dist[u] + w;
            }
            
        }
    }

    return dist;
}

int main() {
    Graph g(7);

    g.addEdge(1, 2, 3);
    g.addEdge(1, 3, 2);
    g.addEdge(1, 4, 4);
    g.addEdge(2, 5, 2);
    g.addEdge(3, 5, 1);
    g.addEdge(3, 4, 1);
    g.addEdge(4, 5, -1);
    g.addEdge(4, 6, 3);
    g.addEdge(4, 7, 2);
    g.addEdge(5, 7, 3);
    g.addEdge(7, 6, -1);

    vector<vector<int>> adj = g.getAdjacency();
    vector<int> dist = bellamFord(1, 7, adj);

    for (int dt : dist) { 
        cout << dt << " ";
    }
    return 0;
}
