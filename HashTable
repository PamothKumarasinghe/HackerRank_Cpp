/* HashTable using Linked list - seperate tableing */

#include <iostream>
#include <vector>
using namespace std;

// for the linked list - creating a Node class //
struct Node { // Not a class, it's a structure bcoz its simple and has no functions
              //all instances are public by default in a structure
    int data;
    Node* Next;
    

    Node(int value) {
        data = value;
        Next = nullptr;
    }
};

class HashTable {
    vector<Node*> table;
    int size;

    public:
    HashTable(int tableSize) {
        size = tableSize;
        table.resize(size, nullptr);
    }

    // hash function to get the index of the key //
    int hashFunction(int key) {
        return key % size;
    }

    // insert function to insert the key in the hash table //
    void insertTable(int key) {
        int index = hashFunction(key);
        
        if (table[index] == nullptr) {
            table[index] = new Node(key);
        }
        else {
            Node* temp = table[index];
            while (temp->Next != nullptr) {
                temp = temp->Next;
           }
            temp->Next = new Node(key);
        }
    }

    bool search(int key) {
        int index = hashFunction(key);
        Node* temp = table[index];
        while (temp) {
            if (temp->data == key) return true;
            temp = temp->Next;
        }
        return false;
    }

    void deleteKey(int key) {
        int index = hashFunction(key);
        Node* temp = table[index];

        //To check if the head node is the key
        if (temp->data == key) {
            table[index] = temp->Next;
            delete temp;
            return;
        }
        while (temp->Next != nullptr) {
            if (temp->Next->data == key) {
                Node* toDelete = temp->Next;
                temp->Next = temp->Next->Next;
                delete toDelete;
                return;
            }
            temp = temp->Next;
        }
    }

    void print() {
        for (int i = 0; i < size; i++) {
            cout << i << " : ";
            Node* temp = table[i];
            while (temp) {
                cout << temp->data << " -> ";
                temp = temp->Next;
            }
            cout << "NULL" << endl;
        }
    }

    // Desrtuctor to free memory
    ~HashTable() {
        for (int i = 0; i < size; i++) {
            Node* temp = table[i];
            while (temp) {
                Node* toDelete = temp;
                temp = temp->Next;
                delete toDelete;
            }
        }
    }
};

int main() {
    HashTable ht(10);
    int a, find;
    cout << "Enter the elements to insert in the hash table : \n";
    while (cin >> a && a != -1) {
        ht.insertTable(a);
    }

    ht.print();
    bool found = ht.search(find);
    if (found) cout << "Search found : "<< find << endl;
    else cout << "Search not found\n";

    cout << "Enter the element to delete : \n";
    while (cin >> a && a != -1) {
        ht.deleteKey(a);
    }
    ht.print();

    return 0;
}
